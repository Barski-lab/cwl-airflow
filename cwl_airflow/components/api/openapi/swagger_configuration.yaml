swagger: "2.0"
info:
  title: CWL-Airflow API
  version: 1.0.1
basePath: "/api/experimental"
schemes:
  - https
  - http
consumes:
  - application/json
produces:
  - application/json


paths:

  /dags:
    get:
      summary: Returns list of dags by dag_ids.
      description: Runs `airflow list_tasks` for every dag_id in dag_ids. If dag_ids is None, process all dags.
      operationId: get_dags
      responses:
        "200":
          description: Filtered by dag_ids list of dags.
          schema:
            $ref: "#/definitions/GetDagsResponse"
        "400":
          description: The request is malformed.
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: The request is unauthorized.
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: The requester is not authorized to perform this action.
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: An unexpected error occurred.
          schema:
            $ref: "#/definitions/ErrorResponse"
      parameters:
        - name: dag_ids
          description: Dag identifiers
          in: query
          required: false
          type: array
          items:
            type: string
      tags:
        - Airflow
    post:
      summary: Creates new dag with dag_id from the attached workflow.cwl file or its compressed content.
      description: Creates new dag with dag_id from the attached workflow.cwl file or its compressed content.
      operationId: post_dags
      responses:
        "200":
          description: dag_id, py and cwl file locations of a created dag.
          schema:
            $ref: "#/definitions/PostDagsResponse"
        "400":
          description: The request is malformed.
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: The request is unauthorized.
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: The requester is not authorized to perform this action.
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: An unexpected error occurred.
          schema:
            $ref: "#/definitions/ErrorResponse"
      consumes:
         - multipart/form-data
      parameters:
        - name: dag_id
          description: Dag identifier
          in: query
          required: false
          type: string
        - name: workflow
          description: CWL workflow file with embedded tools and all other dependencies
          in: formData
          required: false
          type: file
        - name: workflow_content
          description: base64 encoded gzip compressed workflow content
          in: formData
          required: false
          type: string
      tags:
        - Airflow

  /dag_runs:
    get:
      summary: Returns list of dag_runs by dag_id, run_id, execution_date, state.
      description: Runs `airflow task_state dag_id, task_id, execution_date` for every task of dag_run from `airflow list_dag_runs dag_id`
      operationId: get_dag_runs
      responses:
        "200":
          description: Filtered by dag_id, run_id, execution_date, state list of dag_runs.
          schema:
            $ref: "#/definitions/GetDagRunsResponse"
        "400":
          description: The request is malformed.
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: The request is unauthorized.
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: The requester is not authorized to perform this action.
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: An unexpected error occurred.
          schema:
            $ref: "#/definitions/ErrorResponse"
      parameters:
        - name: dag_id
          description: Dag identifier
          in: query
          required: false
          type: string
        - name: run_id
          description: Run identifier
          in: query
          required: false
          type: string
        - name: execution_date
          description: Execution date
          in: query
          required: false
          type: string
          format: date-time
        - name: state
          description: Dag run state
          in: query
          required: false
          type: string
          enum:
            - running
            - success
            - failed
      tags:
        - Airflow
    post:
      summary: Creates new dag_run for dag_id with optional run_id and conf
      description: Creates new_dag run for dag_id with optional run_id and conf
      operationId: post_dag_runs
      responses:
        "200":
          description: Reference information about created dag_run.
          schema:
            $ref: "#/definitions/PostDagRunsResponse"
        "400":
          description: The request is malformed.
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: The request is unauthorized.
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: The requester is not authorized to perform this action.
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: An unexpected error occurred.
          schema:
            $ref: "#/definitions/ErrorResponse"
      parameters:
        - name: dag_id
          description: Dag identifier
          in: query
          required: true
          type: string
        - name: run_id
          description: Run identifier
          in: query
          required: false
          type: string
        - name: conf
          description: Run configuration (JSON-formatted string)
          in: query
          required: false
          type: string
      tags:
        - Airflow

  /dags/dag_runs:
    post:
      summary: Combined logic from /dags and /dag_runs POSTs
      description: >-
        1. Creates new dag with dag_id from the attached workflow.cwl file or its compressed content.
           Either workflow or workflow_content should be provided. 
           dag_id should follow the naming rule "cwlid-commitsha", otherwise outdated dags won't be deleted.
        2. Tries to delete all previous dag_runs for the provided dag_id and run_id, which also includes
           - stopping all running tasks for the current dag_id and run_id
           - removing correspondent temporary data
           - cleaning up correspondent records in DB
           - removing outdated dags for the same cwlid if no running dag_runs were found for them
        3. Creates new dag_run for dag_id with run_id and optional conf
      operationId: post_dags_dag_runs
      consumes:
         - multipart/form-data
      responses:
        "200":
          description: Reference information about created dag and dag_run.
          schema:
            $ref: "#/definitions/PostDagRunsResponse"
        "400":
          description: The request is malformed.
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: The request is unauthorized.
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: The requester is not authorized to perform this action.
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: An unexpected error occurred.
          schema:
            $ref: "#/definitions/ErrorResponse"
      parameters:
        - name: dag_id
          description: Dag identifier, follow the naming rule "cwlid-commitsha"
          in: query
          required: true
          type: string
        - name: run_id
          description: Run identifier
          in: query
          required: true
          type: string
        - name: conf
          description: Run configuration (JSON-formatted string)
          in: query
          required: false
          type: string
        - name: workflow
          description: CWL workflow file with embedded tools and all other dependencies
          in: formData
          required: false
          type: file
        - name: workflow_content
          description: base64 encoded gzip compressed workflow content
          in: formData
          required: false
          type: string
      tags:
        - Airflow

  # delete this path if not actively used 
  /dags/{dag_id}/dag_runs:
    post:
      summary: Creates new dag_run for dag_id with optional run_id and conf
      description: Creates new dag_run for dag_id with optional run_id and conf. Corresponds to the original Airflow API to trigger dag_run
      operationId: post_dag_runs_legacy
      responses:
        "200":
          description: Reference information about created dag_run.
          schema:
            $ref: "#/definitions/PostDagRunsResponse"
        "400":
          description: The request is malformed.
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: The request is unauthorized.
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: The requester is not authorized to perform this action.
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: An unexpected error occurred.
          schema:
            $ref: "#/definitions/ErrorResponse"
      parameters:
        - name: dag_id
          description: Dag identifier
          in: path
          required: true
          type: string
        - name: data
          description: Run identifier and configuration
          in: body
          required: true
          schema:
            type: object
            properties:
              run_id:
                type: string
              conf:
                type: string
      tags:
        - AirflowLegacy

#################################################################################
#                                                                               #
# WES API paths (prefixed with /wes)                                            #
#                                                                               #
#################################################################################

  /wes/service-info:
    get:
      summary: Get information about Workflow Execution Service.
      description: >-
        May include information related (but not limited to) the workflow descriptor formats, versions
        supported, the WES API versions supported, and information about general service availability.
      operationId: wes_get_service_info
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/ServiceInfo"
        "400":
          description: The request is malformed.
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: The request is unauthorized.
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: The requester is not authorized to perform this action.
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: An unexpected error occurred.
          schema:
            $ref: "#/definitions/ErrorResponse"
      tags:
        - WorkflowExecutionService

  /wes/runs:
    get:
      summary: List the workflow runs.
      description: >-
        This list should be provided in a stable ordering.
        (The actual ordering is implementation dependent.)
        When paging through the list, the client should
        not make assumptions about live updates, but should assume the
        contents of the list reflect the workflow list at the moment
        that the first page is requested.  To monitor a specific
        workflow run, use GetRunStatus or GetRunLog.
      operationId: wes_list_runs
      responses:
        "200":
          description: List of the workflow runs
          schema:
            $ref: "#/definitions/RunListResponse"
        "400":
          description: The request is malformed.
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: The request is unauthorized.
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: The requester is not authorized to perform this action.
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: An unexpected error occurred.
          schema:
            $ref: "#/definitions/ErrorResponse"
      parameters:
        - name: page_size                               # currently ignored by cwl-airflow apiserver
          description: >-
            OPTIONAL
            The preferred number of workflow runs to return in a page.
            If not provided, the implementation should use a default page size.
            The implementation must not return more items
            than `page_size`, but it may return fewer.  Clients should
            not assume that if fewer than `page_size` items are
            returned that all items have been returned.  The
            availability of additional pages is indicated by the value
            of `next_page_token` in the response.
          in: query
          required: false
          type: integer
          format: int64
        - name: page_token                              # currently ignored by cwl-airflow apiserver
          description: >-
            OPTIONAL
            Token to use to indicate where to start getting results. If unspecified, return the first
            page of results.
          in: query
          required: false
          type: string
      tags:
        - WorkflowExecutionService
    post:
      summary: Run a workflow.
      description: >-
        This endpoint creates a new workflow run and
        returns a `RunId` to monitor its progress.
        The `workflow_attachment` array may be used to upload files
        that are required to execute the workflow, including the primary
        workflow, tools imported by the workflow, other files
        referenced by the workflow, or files which are part of the
        input.  The implementation should stage these files to a
        temporary directory and execute the workflow from there.
        These parts must have a Content-Disposition header with a
        "filename" provided for each part.  Filenames may include
        subdirectories, but must not include references to parent
        directories with ".." -- implementations should guard against
        maliciously constructed filenames.
        The `workflow_url` is either an absolute URL to a workflow
        file that is accessible by the WES endpoint, or a relative URL
        corresponding to one of the files attached using
        `workflow_attachment`.
        The `workflow_params` JSON object specifies input parameters,
        such as input files.  The exact format of the JSON object
        depends on the conventions of the workflow language being
        used.  Input files should either be absolute URLs, or relative
        URLs corresponding to files uploaded using
        `workflow_attachment`.  The WES endpoint must understand and
        be able to access URLs supplied in the input.  This is
        implementation specific.
        The `workflow_type` is the type of workflow language and
        must be "CWL" or "WDL" currently (or another alternative 
        supported by this WES instance).
        The `workflow_type_version` is the version of the workflow language
        submitted and must be one supported by this WES instance.
        See the `RunRequest` documentation for details about other fields.
      operationId: wes_run_workflow
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/RunId"
        "400":
          description: The request is malformed.
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: The request is unauthorized.
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: The requester is not authorized to perform this action.
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: An unexpected error occurred.
          schema:
            $ref: "#/definitions/ErrorResponse"
      consumes:
         - multipart/form-data
      parameters:
        - in: formData
          name: workflow_params
          type: string
          format: application/json
        - in: formData
          name: workflow_type                                 # currently ignored by cwl-airflow apiserver
          type: string
        - in: formData
          name: workflow_type_version                         # currently ignored by cwl-airflow apiserver
          type: string
        - in: formData
          name: tags                                          # currently ignored by cwl-airflow apiserver
          type: string
          format: application/json
        - in: formData
          name: workflow_engine_parameters                    # currently ignored by cwl-airflow apiserver
          type: string
          format: application/json
        - in: formData
          name: workflow_url
          type: string
        - in: formData
          name: workflow_attachment
          type: array
          items:
            type: string
            format: binary
      tags:
        - WorkflowExecutionService

  /wes/runs/{run_id}:
    get:
      summary: Get detailed info about a workflow run.
      description: >-
        This endpoint provides detailed information about a given workflow run.
        The returned result has information about the outputs produced by this workflow
        (if available), a log object which allows the stderr and stdout to be retrieved,
        a log array so stderr/stdout for individual tasks can be retrieved,
        and the overall state of the workflow run (e.g. RUNNING, see the State section).
      operationId: wes_get_run_log
      responses:
        "200":
          description: Detailed info about a workflow run.
          schema:
            $ref: "#/definitions/RunLog"
        "401":
          description: The request is unauthorized.
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: The requested workflow run not found.
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: The requester is not authorized to perform this action.
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: An unexpected error occurred.
          schema:
            $ref: "#/definitions/ErrorResponse"
      parameters:
        - name: run_id
          in: path
          required: true
          type: string
      tags:
        - WorkflowExecutionService

  /wes/runs/{run_id}/cancel:
    post:
      summary: Cancel a running workflow.
      operationId: wes_cancel_run
      responses:
        "200":
          description: RunId
          schema:
            $ref: "#/definitions/RunId"
        "401":
          description: The request is unauthorized.
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: The requested workflow run wasn"t found.
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: The requester is not authorized to perform this action.
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: An unexpected error occurred.
          schema:
            $ref: "#/definitions/ErrorResponse"
      parameters:
        - name: run_id
          in: path
          required: true
          type: string
      tags:
        - WorkflowExecutionService        

  /wes/runs/{run_id}/status:
    get:
      summary: Get quick status info about a workflow run.
      description: >-
        This provides an abbreviated (and likely fast depending on implementation)
        status of the running workflow, returning a simple result with the 
        overall state of the workflow run (e.g. RUNNING, see the State section).
      operationId: wes_get_run_status
      responses:
        "200":
          description: Status info about a workflow run.
          schema:
            $ref: "#/definitions/RunStatus"
        "401":
          description: The request is unauthorized.
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: The requested workflow run wasn"t found.
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: The requester is not authorized to perform this action.
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: An unexpected error occurred.
          schema:
            $ref: "#/definitions/ErrorResponse"
      parameters:
        - name: run_id
          in: path
          required: true
          type: string
      tags:
        - WorkflowExecutionService


definitions:

  GetDagsResponse:
    type: object
    properties:
      dags:
        type: array
        items:
          type: object
          properties:
            dag_id:
              type: string
            tasks:
              type: array
              items:
                type: string
    description: Filtered by dag_ids list of dags.

  PostDagsResponse:
    type: object
    required:
     - dag_id
     - dag_path
     - cwl_path
    properties:
      dag_id:
        type: string
      dag_path:
        type: string
      cwl_path:
        type: string
    description: dag_id, py and cwl file locations of a created dag.

  GetDagRunsResponse:
    type: object
    properties:
      dag_runs:
        type: array
        items:
          $ref: "#/definitions/DagRunInfo"
    description: Filtered by dag_id, run_id, execution_date and state list of dag_runs.

  PostDagRunsResponse:
    type: object
    required:
     - dag_id
     - run_id
     - execution_date
     - state
     - start_date
    properties:
      dag_id:
        type: string
      run_id:
        type: string
      execution_date:
        type: string
        format: date-time
      start_date:
        type: string
        format: date-time
      state:
        $ref: "#/definitions/DagRunState"
    description: Reference information about created dag_run.

  DagRunInfo:
    type: object
    required:
     - dag_id
     - run_id
     - execution_date
     - start_date
     - state
     - tasks
     - progress
    properties:
      dag_id:
        type: string
      run_id:
        type: string
      execution_date:
        type: string
        format: date-time
      start_date:
        type: string
        format: date-time
      state:
        $ref: "#/definitions/DagRunState"
      tasks:
        type: array
        items:
          type: object
          properties:
            id:
              type: string
            state:
              $ref: "#/definitions/TaskState"
      progress:
        type: integer
    description: Dag run info

  DagRunState:
    type: string
    enum:
      - running
      - success
      - failed
    description: Dag run state

  TaskState:
    type: string
    enum:
      - scheduled
      - queued
      - running
      - success
      - failed
      - up_for_retry
      - up_for_reschedule
      - upstream_failed
      - skipped
      - none
    description: Task state

  ErrorResponse:
    type: object
    properties:
      msg:
        type: string
        description: A detailed error message.
      status_code:
        type: integer
        description: The integer representing the HTTP status code (e.g. 200, 404).
    description: An object that can optionally include information about the error.

#################################################################################
#                                                                               #
# WES API definitions                                                           #
#                                                                               #
#################################################################################

  ServiceInfo:
    type: object
    properties:
      workflow_type_versions:
        type: object
        additionalProperties:
          $ref: "#/definitions/WorkflowTypeVersion"
        description: >-
          A map with keys as the workflow format type name (currently only CWL and WDL are used
          although a service may support others) and value is a workflow_type_version object which
          simply contains an array of one or more version strings
      supported_wes_versions:
        type: array
        items:
          type: string
        description: The version(s) of the WES schema supported by this service
      supported_filesystem_protocols:
        type: array
        items:
          type: string
        description: >-
          The filesystem protocols supported by this service, currently these may include common
          protocols using the terms "http", "https", "sftp", "s3", "gs", "file", or "synapse", but others 
          are possible and the terms beyond these core protocols are currently not fixed.  
          This section reports those protocols (either common or not) supported by this WES service.
      workflow_engine_versions:
        type: object
        additionalProperties:
          type: string
        description: The engine(s) used by this WES service, key is engine name (e.g. Cromwell) and value is version
      default_workflow_engine_parameters:
        type: array
        items:
          $ref: "#/definitions/DefaultWorkflowEngineParameter"
        description: >-
          Each workflow engine can present additional parameters that can be sent to the
          workflow engine. This message will list the default values, and their types for each
          workflow engine.
      system_state_counts:
        type: object
        additionalProperties:
          type: integer
          format: int64
        description: >-
          The system statistics, key is the statistic, value is the count of runs in that state.
          See the State enum for the possible keys.
      auth_instructions_url:
        type: string
        description: >-
          A web page URL with human-readable instructions on how to get an
          authorization token for use with a specific WES endpoint.          
      contact_info_url:
        type: string
        description: >-
          An email address URL (mailto:) or web page URL with contact information
          for the operator of a specific WES endpoint.  Users of the
          endpoint should use this to report problems or security
          vulnerabilities.
      tags:
        type: object
        additionalProperties:
          type: string
        description: >-
          A key-value map of arbitrary, extended metadata outside the scope of the above but useful
          to report back
    description: A message containing useful information about the running service, including supported versions and default settings.

  WorkflowTypeVersion:
    type: object
    properties:
      workflow_type_version:
        type: array
        items:
          type: string
        description: An array of one or more acceptable types for the `workflow_type`.
    description: Available workflow types supported by a given instance of the service.

  DefaultWorkflowEngineParameter:
    type: object
    properties:
      name:
        type: string
        description: The name of the parameter
      type:
        type: string
        description: Describes the type of the parameter, e.g. float.
      default_value:
        type: string
        description: The stringified version of the default parameter. e.g. "2.45".
    description: A message that allows one to describe default parameters for a workflow engine.

  RunListResponse:
    type: object
    properties:
      runs:
        type: array
        items:
          $ref: "#/definitions/RunStatus"
        description: >-
          A list of workflow runs that the service has executed or is executing.
          The list is filtered to only include runs that the caller has permission to see.
      next_page_token:
        type: string
        description: >-
          A token which may be supplied as `page_token` in workflow run list request to get the next page
          of results.  An empty string indicates there are no more items to return.
    description: The service will return a RunListResponse when receiving a successful RunListRequest.

  RunStatus:
    type: object
    required:
     - run_id
    properties:
      run_id:
        type: string
      state:
        $ref: "#/definitions/State"
    description: Small description of a workflow run, returned by server during listing

  State:
    type: string
    enum:
      - UNKNOWN
      - QUEUED
      - INITIALIZING
      - RUNNING
      - PAUSED
      - COMPLETE
      - EXECUTOR_ERROR
      - SYSTEM_ERROR
      - CANCELED
      - CANCELING
    default: UNKNOWN
    description: >-
      - UNKNOWN: The state of the task is unknown.
      This provides a safe default for messages where this field is missing,
      for example, so that a missing field does not accidentally imply that
      the state is QUEUED.

  RunId:
    type: object
    properties:
      run_id:
        type: string
        description: workflow run ID

  RunLog:
    type: object
    properties:
      run_id:
        type: string
        description: workflow run ID
      request:
        $ref: "#/definitions/RunRequest"
        description: The original request message used to initiate this execution.
      state:
        $ref: "#/definitions/State"
        description: The state of the run e.g. RUNNING (see State)
      run_log:
        $ref: "#/definitions/Log"
        description: The logs, and other key info like timing and exit code, for the overall run of this workflow.
      task_logs:
        type: array
        items:
          $ref: "#/definitions/Log"
        description: The logs, and other key info like timing and exit code, for each step in the workflow run.
      outputs:
        type: object
        description: The outputs from the workflow run.

  RunRequest:
    type: object
    properties:
      workflow_params:
        type: object
        description: |-
          REQUIRED
          The workflow run parameterizations (JSON encoded), including input and output file locations
      workflow_type:
        type: string
        description: |-
          REQUIRED
          The workflow descriptor type, must be "CWL" or "WDL" currently (or another alternative supported by this WES instance)
      workflow_type_version:
        type: string
        description: |-
          REQUIRED
          The workflow descriptor type version, must be one supported by this WES instance
      tags:
        type: object
        additionalProperties:
          type: string
        description: |-
          OPTIONAL
          A key-value map of arbitrary metadata outside the scope of `workflow_params` but useful to track with this run request
      workflow_engine_parameters:
        type: object
        additionalProperties:
          type: string
        description: >-
          OPTIONAL
          Additional parameters can be sent to the workflow engine using this field. Default values
          for these parameters can be obtained using the ServiceInfo endpoint.
      workflow_url:
        type: string
        description: >-
          REQUIRED
          The workflow CWL or WDL document.
          When `workflow_attachments` is used to attach files, the `workflow_url` may be a relative path
          to one of the attachments.
    description: |-
      To execute a workflow, send a run request including all the details needed to begin downloading
      and executing a given workflow.

  Log:
    type: object
    properties:
      name:
        type: string
        description: The task or workflow name
      cmd:
        type: array
        items:
          type: string
        description: The command line that was executed
      start_time:
        type: string
        description: When the command started executing, in ISO 8601 format "%Y-%m-%dT%H:%M:%SZ"
      end_time:
        type: string
        description: When the command stopped executing (completed, failed, or cancelled), in ISO 8601 format "%Y-%m-%dT%H:%M:%SZ"
      stdout:
        type: string
        description: >-
          A URL to retrieve standard output logs of the workflow run or
          task.  This URL may change between status requests, or may
          not be available until the task or workflow has finished
          execution.  Should be available using the same credentials
          used to access the WES endpoint.
      stderr:
        type: string
        description: >-
          A URL to retrieve standard error logs of the workflow run or
          task.  This URL may change between status requests, or may
          not be available until the task or workflow has finished
          execution.  Should be available using the same credentials
          used to access the WES endpoint.
      exit_code:
        type: integer
        format: int32
        description: Exit code of the program
    description: Log and other info